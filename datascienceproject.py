# -*- coding: utf-8 -*-
"""DataScienceProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WUbe8EcQIwXrEw1wjLziKp4IiyouEYi0
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import datetime, nltk, warnings
import os
from plotly.subplots import make_subplots
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.preprocessing import MinMaxScaler
os.chdir('/content/drive/MyDrive/Data_Science_Project/')
os.getcwd()

# read the datafile
df_initial = pd.read_csv('data.csv',encoding="ISO-8859-1",dtype={'CustomerID': str,'InvoiceID': str},)
print('Dataframe dimensions:', df_initial.shape)
# convert to proper date time
df_initial['InvoiceDate'] = pd.to_datetime(df_initial['InvoiceDate'])

# information on columns types and number of null values
tab_info=pd.DataFrame(df_initial.dtypes).T.rename(index={0:'column type'})
tab_info=tab_info.append(pd.DataFrame(df_initial.isnull().sum()).T.rename(index={0:'null values (nb)'}))
tab_info=tab_info.append(pd.DataFrame(df_initial.isnull().sum()/df_initial.shape[0]*100).T.rename(index={0:'null values (%)'}))
display(tab_info)

# show first lines
display(df_initial[:5])

# Handling Missing Data : Drop, Random Using fillna and dropna
# df_initial['CustomerID'].fillna(np.random.rand(), inplace=True)
# df_initial.dropna(axis = 0, subset = ['Description'], inplace = True)
df_initial.dropna(axis = 0, subset = ['CustomerID'], inplace = True)

print('Dataframe dimensions:', df_initial.shape)
# information on columns types and number of null values
tab_info=pd.DataFrame(df_initial.dtypes).T.rename(index={0:'column type'})
tab_info=tab_info.append(pd.DataFrame(df_initial.isnull().sum()).T.rename(index={0:'null values (nb)'}))
tab_info=tab_info.append(pd.DataFrame(df_initial.isnull().sum()/df_initial.shape[0]*100).T.rename(index={0:'null values (%)'}))
display(tab_info)

print('Duplicate Entries: {}'.format(df_initial.duplicated().sum()))
df_initial.drop_duplicates(inplace = True)

"""Experiment 5

Kaagle
"""

# Commented out IPython magic to ensure Python compatibility.
# Data analysis packages:
import pandas as pd
import numpy as np
#from datetime import datetime as dt

# Visualization packages:
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

Xd = df_initial['UnitPrice'].mean()
print('Sample mean = {}'.format(Xd))
## Difference standard deviation
Sd = df_initial['UnitPrice'].std()
print('Sample std = {}'.format(Sd))

n = len(df_initial)
df = n-1
print('Degrees of freedom: {}'.format(df))

SEM = Sd / np.sqrt(n)
print('SEM = {}'.format(SEM))

t = Xd / SEM
print('t-test = {}'.format(t))

from scipy import stats
p = stats.t.cdf(t, df=df)
print('p-value = {0:.9f}'.format(p))

stats.ttest_rel(df_initial['UnitPrice'],df_initial['Quantity'])

t_critical = 1.714
ME = t_critical*SEM
CI = (Xd-ME, Xd+ME)
print('Confidence interval: ({0:.2f}, {1:.2f})'.format(CI[0], CI[1]))

"""Towards data science"""

from scipy.stats import ttest_1samp
import numpy as np
print(df_initial)
ages_mean = np.mean(df_initial['UnitPrice'])
print(ages_mean)
tset, pval = ttest_1samp(df_initial['UnitPrice'], 30)
print('p-values',pval)
if pval < 0.05:    # alpha value is 0.05 or 5%
   print(" we are rejecting null hypothesis")
else:
  print("we are accepting null hypothesis")

from scipy.stats import ttest_ind
import numpy as np
year1 = df_initial['UnitPrice'][250001:350000]
year2 = df_initial['UnitPrice'][350001:450000]
print(year1)
print("year2 data :-\n")
print(year2)
year1_mean = np.mean(year1)
year2_mean = np.mean(year2)
print("year1 mean value:",year1_mean)
print("year2 mean value:",year2_mean)
year1_std = np.std(year1)
year2_std = np.std(year2)
print("year1 std value:",year1_std)
print("year2 std value:",year2_std)
ttest,pval = ttest_ind(year1,year2)
print("p-value",pval)
if pval <0.05:
  print("we reject null hypothesis")
else:
  print("we accept null hypothesis")

import pandas as pd
from scipy import stats
year1.describe()
year2.describe()
ttest,pval = stats.ttest_rel(year1[:10000],year2[:10000])
print(pval)
if pval<0.05:
    print("reject null hypothesis")
else:
    print("accept null hypothesis")

ztest ,pval = stests.ztest(year1[:10000], x2=None, value=156)
print(float(pval))
if pval<0.05:
    print("reject null hypothesis")
else:
    print("accept null hypothesis")

ztest ,pval1 = stests.ztest(year1[:10000],year2[:10000], value=0,alternative='two-sided')
print(float(pval1))
if pval<0.05:
    print("reject null hypothesis")
else:
    print("accept null hypothesis")